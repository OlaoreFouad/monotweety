// https://github.com/nomisRev/AndroidGradleJacoco
apply plugin: 'jacoco'

android {
  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }
}

project.afterEvaluate {
  //Gather build type and product flavor names in a list
  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->

      //Define the sourceName and the sourcePath.
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }

      def testTaskName = "test${sourceName.capitalize()}UnitTest"

      //noinspection GroovyAssignabilityCheck
      task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

        group = "Reporting"
        description =
            "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        reports {
          xml {
            enabled = true
            destination file("${project.buildDir}/reports/jacoco/${sourceName.capitalize()}UnitTest/jacoco-report.xml")
          }
          html {
            enabled = true
            destination file("${project.buildDir}/reports/jacoco/${sourceName.capitalize()}UnitTest/html")
          }
        }

        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          '**/*$ViewInjector*.*',
                          '**/*$ViewBinder*.*',
                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                          '**/*Module.*', // Modules for Dagger.
                          '**/*Dagger*.*', // Dagger auto-generated code.
                          '**/*MembersInjector*.*', // Dagger auto-generated code.
                          '**/*_Provide*Factory*.*',
                          '**/*_Factory.*', //Dagger auto-generated code
                          '**/*$*$*.*', // Anonymous classes generated by kotlin
                          'android/databinding/*', // databinding generated code
                          '**/databinding/*Binding.*', // databinding generated code
                          '**/data/**/Models.*',
                          '**/data/**/*DBEntity.*'
        ]

        def classTree = fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}", excludes: fileFilter)
        def kotlinClassTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}", excludes: fileFilter)

        //Directory where the compiled class files are
        classDirectories = files([classTree], [kotlinClassTree])

        sourceDirectories = files(["src/main/java",
                                   "src/$productFlavorName/java",
                                   "src/$buildTypeName/java"])

        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

      }
    }
  }
}